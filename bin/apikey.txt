import os
import secrets
import string
from fastapi import FastAPI, HTTPException, Depends, Header
import sqlite3

app = FastAPI()

# Generate random string
def generate_api_key(length=16):
    alphabet = string.ascii_letters + string.digits
    api_key = ''.join(secrets.choice(alphabet) for _ in range(length))
    return api_key

# If authentication is successful
def authenticate_user(user_id):
    api_key = generate_api_key()
    user_api_keys(api_key)
    return api_key

# Get API Key
def get_api_key_header(api_key: str = Header(None)):
    return api_key


# Validate API Key (Decorator)
def authenticate_api_key(api_key_header: str = Depends(get_api_key_header)):
    if verify_api_key(api_key_header):
        return True
    else:
        raise HTTPException(status_code=401, detail='Invalid API Key')


# Sqlite database connection
def connect_to_database():
    db_path = 'api_keys.db'
    db_exists = os.path.exists(db_path)

    conn = sqlite3.connect(db_path)
    if not db_exists:
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE api_keys (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                api_key TEXT UNIQUE
            )
        """)
        conn.commit()
    return conn

def user_api_keys(api_key):
    conn = connect_to_database()
    cursor = conn.cursor()
    insert_query = "INSERT into api_keys (api_key) VALUES (?)"
    conn.execute(insert_query, (api_key,))
    conn.commit()
    conn.close()
    return

# Validating API Keys
def verify_api_key(api_key):
    conn = connect_to_database()
    cursor = conn.cursor()
    cursor.execute("SELECT api_key FROM api_keys WHERE api_key=?", (api_key,))
    result = cursor.fetchone()
    conn.close()
    return True if result else False


# API Endpoint
@app.get("/protected", dependencies=[Depends(authenticate_api_key)])
async def protected_endpoint():
    return {"message": "Authenticated and authorized"}

@app.get("/generate_api_key/{user_id}")
def generate_user_api_key(user_id: int):
    api_key = authenticate_user(user_id)
    return {"api_key": api_key}